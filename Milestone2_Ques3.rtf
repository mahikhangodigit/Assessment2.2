{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fmodern JetBrains Mono;}}
{\colortbl ;\red0\green51\blue179;\red0\green0\blue0;\red8\green8\blue8;\red140\green140\blue140;\red0\green98\blue122;\red135\green16\blue148;\red6\green125\blue23;\red23\green80\blue235;\red158\green136\blue13;\red255\green255\blue255;}
{\*\generator Riched20 10.0.22000}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Question-3\b0\par
\b 1.Lambda Function\b0\fs24\par

\pard\box\brdrdash\brdrw0 \cbpat10\sa200\sl276\slmult1\cf1 interface \cf2 FuncInter\cf3\{ \cf4\i //interface method\line     \cf1\i0 void \cf5 abstractFunc\cf3 (\cf1 int \cf3 x);\line     \cf1 default void \cf5 normalFunc\cf3 ()\{\line         \cf2 System\cf3 .\cf6\i out\cf3\i0 .println(\cf7 "hello"\cf3 );\line     \}\line\}\line\cf1 public class \cf2 LambdaExpression \cf3\{ \cf4\i //main class\line     \cf1\i0 public static void \cf5 main\cf3 (\cf2 String \cf3 args [])\{\line         \cf2 FuncInter funcObj \cf3 =(\cf1 int \cf3 x)->\cf2 System\cf3 .\cf6\i out\cf3\i0 .println(\cf8 2\cf3 *x); \cf4\i //lambda expression\line         \cf2\i0 funcObj\cf3 .abstractFunc(\cf8 7\cf3 );\line     \}\line\}\par

\pard\sa200\sl276\slmult1\cf0\b\fs28 2.Method Reference Example\b0\fs24\par

\pard\box\brdrdash\brdrw0 \cbpat10\sa200\sl276\slmult1\cf1 public class \cf2 MethodReference \cf3\{\line     \cf1 interface \cf2 MyInterface\cf3\{\line         \cf1 void \cf5 display\cf3 ();\line     \}\line         \cf1 public void \cf5 myMethod\cf3 ()\{\line             \cf2 System\cf3 .\cf6\i out\cf3\i0 .println(\cf7 "Interface get printed"\cf3 );\line         \}\line         \cf1 public static void \cf5 main\cf3 (\cf2 String\cf3 [] args) \{\line             \cf2 MethodReference obj \cf3 = \cf1 new \cf3 MethodReference();\line             \cf4\i // Method reference using the object of the class\line             \cf2\i0 MyInterface ref \cf3 = \cf2 obj\cf3 ::myMethod;\line             \cf4\i // Calling the method of functional interface\line             \cf2\i0 ref\cf3 .display();\line         \}\line     \}\cf0\par

\pard\sa200\sl276\slmult1\b\fs28 3.Functional Interface Example\b0\fs24\par

\pard\box\brdrdash\brdrw0 \cbpat10\sa200\sl276\slmult1\cf1 interface \cf2 funcIn\cf3\{ \cf4\i //interface method\line     \cf1\i0 void \cf5 say\cf3 (\cf2 String \cf3 msg);\line     \cf2 String \cf5 toString\cf3 ();\line\}\line\cf1 public class \cf2 FunctionalInterface \cf1 implements \cf2 funcIn\cf3\{\line     \cf1 public void \cf5 say\cf3 (\cf2 String \cf3 msg)\{\line         \cf2 System\cf3 .\cf6\i out\cf3\i0 .println(msg);\line     \}\line     \cf1 public static void \cf5 main\cf3 (\cf2 String \cf3 [] args)\{\line         \cf2 FunctionalInterface f\cf3 =\cf1 new \cf3 FunctionalInterface();\cf4\i //object creation\line         \cf2\i0 f\cf3 .say(\cf7 "Hii,this is Functional Interface"\cf3 );\line     \}\line\}\cf0\par

\pard\sa200\sl276\slmult1\b\fs28 4.Default Method\fs24\par

\pard\box\brdrdash\brdrw0 \cbpat10\sa200\sl276\slmult1\cf1\b0 interface \cf2 TestDefault\cf3\{\line     \cf1 public void \cf5 square\cf3 (\cf1 int \cf3 a);\line     \cf1 default void \cf5 show\cf3 ()\{\cf4\i //Default Method\line         \cf2\i0 System\cf3 .\cf6\i out\cf3\i0 .println(\cf7 "Default method executed"\cf3 );\line     \}\line\}\line\cf1 public class \cf2 DefaultMethod \cf1 implements \cf2 TestDefault\cf3\{\cf4\i //Default Method Class\line     \cf1\i0 public void \cf5 square\cf3 (\cf1 int \cf3 a)\{\cf4\i //implementation of square abstract method\line         \cf2\i0 System\cf3 .\cf6\i out\cf3\i0 .println(a*a);\line     \}\line     \cf1 public static void \cf5 main\cf3 (\cf2 String \cf3 [] args)\{\line         \cf2 DefaultMethod d\cf3 =\cf1 new \cf3 DefaultMethod();\cf4\i //Creating Object\line         \cf2\i0 d\cf3 .square(\cf8 6\cf3 );\line         \cf2 d\cf3 .show();\line     \}\line\}\par

\pard\sa200\sl276\slmult1\cf0\b\fs28 Static method\b0\fs24\par

\pard\box\brdrdash\brdrw0 \cbpat10\sa200\sl276\slmult1\cf1 interface \cf2 Interface\cf3\{\line     \cf1 static void \cf5 hello\cf3 ()\{\line         \cf2 System\cf3 .\cf6\i out\cf3\i0 .println(\cf7 "new Static Method"\cf3 );\line     \}\line     \cf1 void \cf5 overrideMethod\cf3 (\cf2 String \cf3 str);\cf4\i //public and abstract method of interface\line\cf3\i0\}\line\cf1 public class \cf2 StaticMethod \cf1 implements \cf2 Interface\cf3\{\line     \cf1 public static void \cf5 main\cf3 (\cf2 String \cf3 [] args)\{\line         \cf2 StaticMethod s\cf3 =\cf1 new \cf3 StaticMethod();\line         \cf2 Interface\cf3 .\i hello\i0 ();\cf4\i //calling static method of interface\line         \cf2\i0 s\cf3 .overrideMethod(\cf7 "override method "\cf3 );\cf4\i //calling abstract method of interface\line     \cf3\i0\}\line     \cf9 @Override\line     \cf1 public void \cf5 overrideMethod\cf3 (\cf2 String \cf3 str)\{\line         \cf2 System\cf3 .\cf6\i out\cf3\i0 .println(str);\line     \}\line\}\par
\b\fs28\lang16393 5.Streams\b0\fs24\par
\cf1 import \cf2 java.util.\cf3 *;\line\cf1 import \cf2 java.util.stream.\cf3 *;\line\cf1 public class \cf2 Stream \cf3\{\line     \cf1 public static void \cf5 main\cf3 (\cf2 String \cf3 args[])\{\line         \cf2 List\cf3 <\cf2 Integer\cf3 > \cf2 marks\cf3 =\cf2 Arrays\cf3 .\i asList\i0 (\cf8 59\cf3 ,\cf8 64\cf3 ,\cf8 77\cf3 ,\cf8 90\cf3 );\cf4\i //creating list of integers\line         \cf2\i0 List\cf3 <\cf2 Integer\cf3 > \cf2 percentage\cf3 =\cf2 marks\cf3 .stream().map(a ->(a*\cf8 100\cf3 )/\cf8 150\cf3 ).collect(\cf2 Collectors\cf3 .\i toList\i0 ());\line         \cf2 System\cf3 .\cf6\i out\cf3\i0 .println(\cf2 percentage\cf3 );\line         \cf2 List\cf3 <\cf2 String\cf3 > \cf2 names\cf3 =\cf2 Arrays\cf3 .\i asList\i0 (\cf7 "Karishma"\cf3 ,\cf7 "Mangalore"\cf3 ,\cf7 "Aspiration"\cf3 );\cf4\i //List of String\line         \cf2\i0 List\cf3 <\cf2 String\cf3 > \cf2 result\cf3 =\cf2 names\cf3 .stream().filter(s->s.startsWith(\cf7 "M"\cf3 )).collect(\cf2 Collectors\cf3 .\i toList\i0 ());\line         \cf2 System\cf3 .\cf6\i out\cf3\i0 .println(\cf2 result\cf3 );\line         \cf2 List\cf3 <\cf2 String\cf3 > \cf2 Str\cf3 =\cf2 names\cf3 .stream().sorted().collect(\cf2 Collectors\cf3 .\i toList\i0 ());\line         \cf2 System\cf3 .\cf6\i out\cf3\i0 .println(\cf2 Str\cf3 );\line     \}\line\}\par
\b\fs28 6.Stream Filter\b0\fs24\par
\cf1 import \cf2 java.util.List\cf3 ;\line\cf1 import \cf2 java.util.stream.Collectors\cf3 ;\line\line\cf1 public class \cf2 StreamFilter \cf3\{\line     \cf1 public static void \cf5 main\cf3 (\cf2 String \cf3 [] args)\{\line         \cf2 List\cf3 <\cf2 String\cf3 > \cf2 Fruits\cf3 =\cf2 List\cf3 .\i of\i0 (\cf7 "Grapes"\cf3 ,\cf7 "Mango"\cf3 ,\cf7 "Apple"\cf3 ,\cf7 "Guava"\cf3 ,\cf7 "Litchi"\cf3 ,\cf7 "Chiku"\cf3 );\cf4\i //Creating String List\line         \cf2\i0 List\cf3 <\cf2 String\cf3 > \cf2 result\cf3 =\cf2 Fruits\cf3 .stream().filter(Fruit ->Fruit.length()>\cf8 5\cf3 ).collect(\cf2 Collectors\cf3 .\i toList\i0 ());\cf4\i //Using Stream Filter\line         \cf2\i0 result\cf3 .forEach(Fruit ->\cf2 System\cf3 .\cf6\i out\cf3\i0 .println(Fruit));\line     \}\line\}\par
\par
\b\fs28 7.forEach()\b0\fs20\line\cf1\fs24 public class \cf2 ForEach \cf3\{\line     \cf1 public static void \cf5 main\cf3 (\cf2 String \cf3 [] args)\{\line         \cf1 int \cf3 [] \cf2 values\cf3 =\{\cf8 5\cf3 ,-\cf8 8\cf3 ,\cf8 6\cf3 ,\cf8 0\cf3\}; \cf4\i //creating array\line         \cf1\i0 int \cf3 add=\cf8 0\cf3 ;\line         \cf1 for\cf3 (\cf1 int \cf2 value\cf3 :\cf2 values\cf3 )\{\cf4\i //for each loop\line             \cf3\i0 add+=\cf2 value\cf3 ;\line             \cf2 System\cf3 .\cf6\i out\cf3\i0 .println(add);\line         \}\line     \}\line\}\par
\b\fs28 8.Collector Class\b0\fs24\par
\cf1 import \cf2 java.util.\cf3 *;\line\cf1 import \cf2 java.util.function.Function\cf3 ;\line\cf1 import \cf2 java.util.stream.Collectors\cf3 ;\line\line\cf1 public class \cf2 CollectorClass \cf3\{\line     \cf1 public static void \cf5 main\cf3 (\cf2 String\cf3 [] args) \{\line\line         \cf2 List\cf3 <\cf2 String\cf3 > \cf2 Cartoons \cf3 = \cf2 Arrays\cf3 .\i asList\i0 (\cf7 "Oggy"\cf3 , \cf7 "Motu"\cf3 , \cf7 "Tom"\cf3 , \cf7 "Jerry"\cf3 , \cf7 "Chutki"\cf3 , \cf7 "Tom"\cf3 ,\cf7 "Motu"\cf3 ,\cf7 "Motu"\cf3 );\cf4\i //Creating Array list\line\line         \cf2\i0 Map\cf3 <\cf2 String\cf3 ,\cf2 Long\cf3 > \cf2 map \cf3 =\line                 \cf2 Cartoons\cf3 .stream().collect(\cf2 Collectors\cf3 .\i groupingBy\i0 (\cf2 Function\cf3 .\i identity\i0 (), \cf2 Collectors\cf3 .\i counting\i0 ()));\cf4\i //creating map\line         \cf2\i0 System\cf3 .\cf6\i out\cf3\i0 .println(\cf2 map\cf3 );\line\line     \}\line\}\par
\b\fs28 9.String Joiner\b0\fs24\par
\cf1 import \cf2 java.util.ArrayList\cf3 ;\line\cf1 import \cf2 java.util.StringJoiner\cf3 ;\line\cf1 public class \cf2 StrJoiner \cf3\{\line\line     \cf1 public static void \cf5 main\cf3 (\cf2 String \cf3 [] args)\{\line         \cf2 ArrayList\cf3 <\cf2 String\cf3 > \cf2 li\cf3 =\cf1 new \cf3 ArrayList<>(); \cf4\i //Creating Array list\line         \cf2\i0 li\cf3 .add(\cf7 "jungle"\cf3 );\line         \cf2 li\cf3 .add(\cf7 "mougli"\cf3 );\line         \cf2 li\cf3 .add(\cf7 "bagira"\cf3 );\line         \cf2 li\cf3 .add(\cf7 "sherkha"\cf3 );\line         \cf2 StringJoiner sj\cf3 =\cf1 new \cf3 StringJoiner(\cf7 ","\cf3 );\cf4\i //creating object for String Joiner\line         \cf2\i0 System\cf3 .\cf6\i out\cf3\i0 .println(\cf2 sj\cf3 );\line         \cf2 sj\cf3 .add(\cf2 li\cf3 .get(\cf8 0\cf3 )).add(\cf2 li\cf3 .get(\cf8 1\cf3 ));\cf4\i //getting values to string joiner\line         \cf2\i0 System\cf3 .\cf6\i out\cf3\i0 .println(\cf2 sj\cf3 );\line     \}\line\}\par
\b\fs28 10.Optional Class\b0\fs24\par
\cf1 import \cf2 java.util.Optional\cf3 ;\line\line\cf1 public class \cf2 OptionalClass \cf3\{\line     \cf1 public static void \cf5 main\cf3 (\cf2 String\cf3 [] args) \{\line         \cf2 String\cf3 [] \cf2 s1 \cf3 = \cf1 new \cf3 String[\cf8 20\cf3 ]; \cf4\i //String Array\line         \cf2\i0 s1\cf3 [\cf8 9\cf3 ] = \cf7 "Paris is in France"\cf3 ;\line         \cf2 Optional\cf3 <\cf2 String\cf3 > \cf2 isNull \cf3 = \cf2 Optional\cf3 .\i ofNullable\i0 (\cf2 s1\cf3 [\cf8 9\cf3 ]);\line         \cf1 if\cf3 (\cf2 isNull\cf3 .isPresent())\{\cf4\i //Getting  substring\line             \cf2\i0 String s2 \cf3 = \cf2 s1\cf3 [\cf8 9\cf3 ].substring(\cf8 2\cf3 ,\cf8 8\cf3 );\cf4\i //Displaying substring\line             \cf2\i0 System\cf3 .\cf6\i out\cf3\i0 .print(\cf7 "Result is:"\cf3 + \cf2 s2\cf3 );\line         \}\line         \cf1 else\cf3\{\line             \cf2 System\cf3 .\cf6\i out\cf3\i0 .println(\cf7 "null null null"\cf3 );\line         \}\line     \}\line\}\par
\par
\par
\f1\fs28\lang9\par

\pard\sa200\sl276\slmult1\cf0\f0\fs22\par
\par
}
 